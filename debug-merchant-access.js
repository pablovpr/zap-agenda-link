// Script de Debug para Acesso do Comerciante
// Cole este c√≥digo no console do navegador (F12) para diagnosticar problemas

console.log('üîç Iniciando diagn√≥stico de acesso do comerciante...');

// Fun√ß√£o para verificar dados de autentica√ß√£o
function checkAuthData() {
    console.log('\nüìã 1. Verificando dados de autentica√ß√£o...');
    
    // Procurar por dados do Supabase no localStorage
    const keys = Object.keys(localStorage);
    const supabaseKeys = keys.filter(key => key.includes('supabase') || key.includes('sb-'));
    
    if (supabaseKeys.length === 0) {
        console.log('‚ùå Nenhum dado de autentica√ß√£o encontrado no localStorage');
        return null;
    }
    
    supabaseKeys.forEach(key => {
        console.log(`üîë Chave encontrada: ${key}`);
        try {
            const data = JSON.parse(localStorage.getItem(key));
            if (data && data.user) {
                console.log(`‚úÖ Usu√°rio logado: ${data.user.email}`);
                console.log(`‚è∞ Sess√£o expira: ${new Date(data.expires_at * 1000)}`);
                console.log(`üÜî User ID: ${data.user.id}`);
                return data;
            }
        } catch (e) {
            console.log(`‚ùå Erro ao parsear ${key}:`, e);
        }
    });
    
    return null;
}

// Fun√ß√£o para testar conex√£o com Supabase
async function testSupabaseConnection() {
    console.log('\nüîå 2. Testando conex√£o com Supabase...');
    
    try {
        // Tentar importar o cliente Supabase (se dispon√≠vel globalmente)
        if (typeof window.supabase !== 'undefined') {
            const { data, error } = await window.supabase.auth.getSession();
            if (error) {
                console.log('‚ùå Erro ao obter sess√£o:', error);
                return false;
            }
            console.log('‚úÖ Conex√£o com Supabase OK');
            console.log('üë§ Sess√£o atual:', data.session ? 'Ativa' : 'Inativa');
            return true;
        } else {
            console.log('‚ö†Ô∏è Cliente Supabase n√£o dispon√≠vel globalmente');
            return null;
        }
    } catch (error) {
        console.log('‚ùå Erro na conex√£o:', error);
        return false;
    }
}

// Fun√ß√£o para verificar perfil do usu√°rio
async function checkUserProfile(userId) {
    console.log('\nüë§ 3. Verificando perfil do usu√°rio...');
    
    if (!userId) {
        console.log('‚ùå ID do usu√°rio n√£o fornecido');
        return null;
    }
    
    try {
        // Simular chamada para o perfil (se Supabase estiver dispon√≠vel)
        if (typeof window.supabase !== 'undefined') {
            const { data, error } = await window.supabase
                .from('profiles')
                .select('*')
                .eq('id', userId)
                .maybeSingle();
                
            if (error) {
                console.log('‚ùå Erro ao buscar perfil:', error);
                return null;
            }
            
            if (!data) {
                console.log('‚ùå Perfil n√£o encontrado');
                return null;
            }
            
            console.log('‚úÖ Perfil encontrado:', data);
            
            if (!data.company_name) {
                console.log('‚ö†Ô∏è company_name n√£o definido - redirecionamento para /company-setup esperado');
            } else {
                console.log('‚úÖ company_name definido:', data.company_name);
            }
            
            return data;
        } else {
            console.log('‚ö†Ô∏è N√£o √© poss√≠vel verificar perfil - Supabase n√£o dispon√≠vel');
            return null;
        }
    } catch (error) {
        console.log('‚ùå Erro ao verificar perfil:', error);
        return null;
    }
}

// Fun√ß√£o para verificar rotas
function checkCurrentRoute() {
    console.log('\nüõ£Ô∏è 4. Verificando rota atual...');
    
    const currentPath = window.location.pathname;
    const currentUrl = window.location.href;
    
    console.log(`üìç Rota atual: ${currentPath}`);
    console.log(`üåê URL completa: ${currentUrl}`);
    
    // Verificar se est√° na rota correta
    if (currentPath === '/') {
        console.log('‚úÖ Na rota raiz - deve mostrar dashboard do comerciante');
    } else if (currentPath === '/auth') {
        console.log('üîê Na p√°gina de autentica√ß√£o');
    } else if (currentPath === '/company-setup') {
        console.log('üè¢ Na p√°gina de configura√ß√£o da empresa');
    } else if (currentPath.startsWith('/public/')) {
        console.log('üåç Na √°rea p√∫blica');
    } else {
        console.log('‚ùì Rota n√£o reconhecida');
    }
}

// Fun√ß√£o para verificar erros no console
function checkConsoleErrors() {
    console.log('\nüö® 5. Verificando erros recentes...');
    
    // Interceptar erros futuros
    const originalError = console.error;
    const errors = [];
    
    console.error = function(...args) {
        errors.push(args);
        originalError.apply(console, args);
    };
    
    setTimeout(() => {
        console.error = originalError;
        if (errors.length > 0) {
            console.log(`‚ùå ${errors.length} erro(s) detectado(s):`);
            errors.forEach((error, index) => {
                console.log(`${index + 1}.`, ...error);
            });
        } else {
            console.log('‚úÖ Nenhum erro detectado nos √∫ltimos segundos');
        }
    }, 2000);
}

// Fun√ß√£o principal de diagn√≥stico
async function runDiagnosis() {
    console.log('üîç DIAGN√ìSTICO DE ACESSO DO COMERCIANTE');
    console.log('=====================================');
    
    // 1. Verificar autentica√ß√£o
    const authData = checkAuthData();
    
    // 2. Testar conex√£o
    await testSupabaseConnection();
    
    // 3. Verificar perfil (se tiver usu√°rio)
    if (authData && authData.user) {
        await checkUserProfile(authData.user.id);
    }
    
    // 4. Verificar rota
    checkCurrentRoute();
    
    // 5. Monitorar erros
    checkConsoleErrors();
    
    console.log('\nüìã RESUMO DO DIAGN√ìSTICO:');
    console.log('========================');
    console.log('1. Verifique os resultados acima');
    console.log('2. Se n√£o h√° usu√°rio logado ‚Üí acesse /auth');
    console.log('3. Se perfil incompleto ‚Üí acesse /company-setup');
    console.log('4. Se h√° erros ‚Üí resolva-os primeiro');
    console.log('5. Se tudo OK mas n√£o funciona ‚Üí limpe cache e tente novamente');
    
    console.log('\nüõ†Ô∏è A√á√ïES SUGERIDAS:');
    console.log('==================');
    console.log('‚Ä¢ Para limpar dados: localStorage.clear(); sessionStorage.clear();');
    console.log('‚Ä¢ Para ir ao login: window.location.href = "/auth";');
    console.log('‚Ä¢ Para ir ao setup: window.location.href = "/company-setup";');
    console.log('‚Ä¢ Para recarregar: window.location.reload();');
}

// Executar diagn√≥stico
runDiagnosis();

// Disponibilizar fun√ß√µes globalmente para uso manual
window.debugMerchant = {
    checkAuth: checkAuthData,
    testConnection: testSupabaseConnection,
    checkProfile: checkUserProfile,
    checkRoute: checkCurrentRoute,
    clearData: () => {
        localStorage.clear();
        sessionStorage.clear();
        console.log('‚úÖ Dados limpos. Recarregue a p√°gina.');
    },
    goToAuth: () => window.location.href = '/auth',
    goToSetup: () => window.location.href = '/company-setup',
    goToHome: () => window.location.href = '/',
    reload: () => window.location.reload()
};

console.log('\nüîß Fun√ß√µes dispon√≠veis:');
console.log('window.debugMerchant.checkAuth() - Verificar autentica√ß√£o');
console.log('window.debugMerchant.clearData() - Limpar dados');
console.log('window.debugMerchant.goToAuth() - Ir para login');
console.log('window.debugMerchant.goToSetup() - Ir para setup');
console.log('window.debugMerchant.reload() - Recarregar p√°gina');